import desafioFaturamento.Faturamento;
import desafioFibonacci.Fibonacci;
import desafioInverterString.InverterString;
import desafioPercentualFaturamento.PercentualFaturamento;
import desafioSoma.Soma;

import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {

    private static Scanner scanner = new Scanner(System.in);

    // Mensagens e op√ß√µes usadas em m√∫ltiplos lugares
    private static String MENU_PRINCIPAL = """
        \n-----------------------------
        üë©‚Äçüíª     Target Sistemas     üë®‚Äçüíª
        -----------------------------
        1. Desafio Soma
        2. Desafio Fibonacci
        3. Desafio Faturamento
        4. Desafio Percentual Faturamento
        5. Desafio Invers√£o de String
        6. Sair
        """;

    private static String MENU_SOMA = """
        \n------------
        Desafio Soma
        ------------
        1. Somar N√∫mero Padr√£o do Caso
        2. Escolher Somar N√∫mero
        """;

    private static final String OPCAO_INVALIDA = "Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida.";

    private static int lerOpcao(String menu) {
        int opcao = 0;
        boolean inputValido = false;

        // Exibe o menu e l√™ a op√ß√£o escolhida pelo usu√°rio
        System.out.println(menu);
        while (!inputValido) {
            try {
                System.out.print("Escolha uma op√ß√£o: ");
                opcao = scanner.nextInt();
                scanner.nextLine(); // Consumir a nova linha deixada pelo nextInt()

                if (opcao > 0) {
                    inputValido = true; // Se a op√ß√£o for v√°lida, sai do loop
                } else {
                    System.out.println(OPCAO_INVALIDA);
                }
            } catch (InputMismatchException e) {
                System.out.println("Entrada inv√°lida. Por favor, insira um n√∫mero v√°lido.");
                scanner.next(); // Limpar o buffer para evitar loop infinito
            }
        }

        return opcao;
    }

    private static int lerNumero() {
        int numero = 0;
        boolean inputValido = false;

        while (!inputValido) {
            try {
                numero = scanner.nextInt();
                scanner.nextLine(); // Consumir a nova linha deixada pelo nextInt()
                inputValido = true;
            } catch (InputMismatchException e) {
                System.out.println("Entrada inv√°lida. Por favor, insira um n√∫mero inteiro.");
                scanner.next(); // Limpar o buffer para evitar loop infinito
            }
        }

        return numero;
    }

    private static void somar() {
        int opcao = lerOpcao(MENU_SOMA);
        Soma soma = new Soma(); // Cria uma inst√¢ncia da classe Soma
        int resultado;

        switch (opcao) {
            case 1:
                resultado = soma.somarNumeroPadrao(); // Soma os n√∫meros padr√£o
                System.out.printf("Valor da soma com n√∫mero padr√£o: %d.\n", resultado);
                break;
            case 2:
                System.out.print("Informe um n√∫mero para somar: ");
                int numero = lerNumero(); // L√™ o n√∫mero informado pelo usu√°rio
                resultado = soma.escolherSomarNumero(numero); // Soma o n√∫mero informado
                System.out.printf("Valor da soma com n√∫mero informado: %d.\n", resultado);
                break;
            default:
                System.out.println(OPCAO_INVALIDA);
                break;
        }
    }

    private static void verificarNumeroFibonacci() {
        System.out.println("""
        \n---------------
        Desafio Fibonacci
        -----------------
        """);

        System.out.print("Informe um n√∫mero: ");
        int numero = lerNumero(); // L√™ o n√∫mero informado pelo usu√°rio

        Fibonacci fibonacci = new Fibonacci(); // Cria uma inst√¢ncia da classe Fibonacci
        fibonacci.verificarNumeroFibonacci(numero); // Verifica se o n√∫mero faz parte da sequ√™ncia de Fibonacci
    }

    private static void mostrarResultadosFaturamento() {
        System.out.println("""
        \n-----------------
        Desafio Faturamento
        -------------------
        """);

        try {
            Faturamento faturamento = Faturamento.fromXML(); // L√™ os dados de faturamento do arquivo XML
            faturamento.mostrarFaturamento(); // Mostra os resultados do faturamento
        } catch (Exception e) {
            System.out.println("Erro ao ler o arquivo de faturamento: " + e.getMessage());
        }
    }

    private static void mostrarPercentualFaturamento() {
        System.out.println("""
        \n----------------------------
        Desafio Percentual Faturamento
        ------------------------------
        """);

        try {
            PercentualFaturamento percentualFaturamento = PercentualFaturamento.fromXML(); // L√™ os dados de percentual do arquivo XML
            percentualFaturamento.calcularPercentuais(); // Calcula e mostra os percentuais de faturamento
        } catch (Exception e) {
            System.out.println("Erro ao calcular percentual de faturamento: " + e.getMessage());
        }
    }

    private static void inverterString() {
        System.out.println("""
        \n-----------------------------
        Desafio Invers√£o de String
        -----------------------------
        """);

        System.out.print("Informe a string para inverter: ");
        String str = scanner.nextLine(); // L√™ a string informada pelo usu√°rio

        String resultado = InverterString.inverter(str); // Inverte a string
        System.out.printf("String invertida: %s\n", resultado);
    }

    public static void main(String[] args) {
        boolean continuar = true; // Controle para manter o loop do menu ativo

        // Loop do menu principal
        while (continuar) {
            int opcao = lerOpcao(MENU_PRINCIPAL);

            switch (opcao) {
                case 1:
                    somar(); // Chama o m√©todo de soma
                    break;
                case 2:
                    verificarNumeroFibonacci(); // Chama o m√©todo de verifica√ß√£o Fibonacci
                    break;
                case 3:
                    mostrarResultadosFaturamento(); // Chama o m√©todo de mostrar resultados de faturamento
                    break;
                case 4:
                    mostrarPercentualFaturamento(); // Chama o m√©todo de mostrar percentual de faturamento
                    break;
                case 5:
                    inverterString(); // Chama o m√©todo de invers√£o de string
                    break;
                case 6:
                    continuar = false; // Sinaliza para sair do loop e encerrar o programa
                    System.out.println("""
                        
                        #QueroSerTargetiano üë®‚Äçüíª
                        
                        Antes de ir... Acesse o meu portf√≥lio: https://meuportfolio-euvitortis-projects.vercel.app/
                        
                        Saindo... Obrigado por usar o programa. üëã
                        """);
                    break;
                default:
                    System.out.println(OPCAO_INVALIDA);
                    break;
            }
        }

        scanner.close(); // Fecha o scanner para liberar recursos
    }
}
