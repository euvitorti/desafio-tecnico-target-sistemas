import desafioFaturamento.Faturamento;
import desafioFibonacci.Fibonacci;
import desafioInverterString.InverterString;
import desafioPercentualFaturamento.PercentualFaturamento;
import desafioSoma.Soma;

import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {

    private static final Scanner scanner = new Scanner(System.in); // Scanner para entrada do usu√°rio
    private static final String OPCAO_INVALIDA = "Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida.";

    // Menu principal com as op√ß√µes dos desafios
    private static final String MENU_PRINCIPAL = """
       \n-----------------------------
       üë©‚Äçüíª     Target Sistemas     üë®‚Äçüíª
       -----------------------------
       1. Desafio Soma
       2. Desafio Fibonacci
       3. Desafio Faturamento
       4. Desafio Percentual Faturamento
       5. Desafio Invers√£o de String
       6. Sair
       """;

    // Menu para o desafio de soma com subop√ß√µes
    private static final String MENU_SOMA = """
       \n------------
       Desafio Soma
       ------------
       1. Somar N√∫mero Padr√£o do Caso
       2. Escolher Somar N√∫mero
       """;

    // M√©todo para ler a op√ß√£o escolhida pelo usu√°rio
    private static int lerOpcao(String menu) {
        System.out.println(menu); // Exibe o menu

        while (true) {
            try {
                System.out.print("Escolha uma op√ß√£o: ");
                int opcao = scanner.nextInt(); // L√™ a op√ß√£o do usu√°rio
                scanner.nextLine(); // Consome a nova linha deixada pelo nextInt()

                if (opcao > 0) return opcao; // Retorna a op√ß√£o se for v√°lida
                System.out.println(OPCAO_INVALIDA); // Exibe mensagem de erro se a op√ß√£o for inv√°lida

            } catch (InputMismatchException e) {
                System.out.println("Entrada inv√°lida. Por favor, insira um n√∫mero v√°lido.");
                scanner.next(); // Limpa o buffer para evitar loop infinito
            }
        }
    }

    // M√©todo para ler um n√∫mero inteiro fornecido pelo usu√°rio
    private static int lerNumero() {
        while (true) {
            try {
                int numero = scanner.nextInt(); // L√™ o n√∫mero inteiro
                scanner.nextLine(); // Consome a nova linha deixada pelo nextInt()
                return numero;

            } catch (InputMismatchException e) {
                System.out.println("Entrada inv√°lida. Por favor, insira um n√∫mero inteiro.");
                scanner.next(); // Limpa o buffer para evitar loop infinito
            }
        }
    }

    // M√©todo para executar o desafio de soma
    private static void somar() {
        int opcao = lerOpcao(MENU_SOMA); // L√™ a op√ß√£o do usu√°rio dentro do menu de soma
        Soma soma = new Soma(); // Cria uma inst√¢ncia da classe Soma

        // Executa a soma com base na op√ß√£o escolhida
        int resultado = switch (opcao) {
            case 1 -> soma.somarNumeroPadrao(); // Soma usando o n√∫mero padr√£o
            case 2 -> {
                System.out.print("Informe um n√∫mero para somar: ");
                yield soma.escolherSomarNumero(lerNumero()); // Soma usando o n√∫mero fornecido pelo usu√°rio
            }
            default -> {
                System.out.println(OPCAO_INVALIDA); // Mensagem de erro para op√ß√£o inv√°lida
                yield 0;
            }
        };

        if (resultado != 0)
            System.out.printf("Valor da soma: %d.\n", resultado); // Exibe o resultado da soma
    }

    // M√©todo para executar o desafio de Fibonacci
    private static void verificarNumeroFibonacci() {
        System.out.println("""
       -----------------
       Desafio Fibonacci
       -----------------""");
        System.out.print("Informe um n√∫mero: ");
        new Fibonacci().verificarNumeroFibonacci(lerNumero()); // Verifica se o n√∫mero est√° na sequ√™ncia de Fibonacci
    }

    // M√©todo para executar o desafio de faturamento
    private static void mostrarResultadosFaturamento() {
        System.out.println("""
       -------------------
       Desafio Faturamento
       -------------------""");
        try {
            Faturamento.fromXML().mostrarFaturamento(); // L√™ e exibe os resultados do faturamento a partir de um arquivo XML
        } catch (Exception e) {
            System.out.println("Erro ao ler o arquivo de faturamento: " + e.getMessage());
        }
    }

    // M√©todo para executar o desafio de percentual de faturamento
    private static void mostrarPercentualFaturamento() {
        System.out.println("""
       ------------------------------
       Desafio Percentual Faturamento
       ------------------------------""");
        try {
            PercentualFaturamento.fromXML().calcularPercentuais(); // Calcula e exibe os percentuais de faturamento
        } catch (Exception e) {
            System.out.println("Erro ao calcular percentual de faturamento: " + e.getMessage());
        }
    }

    // M√©todo para executar o desafio de invers√£o de string
    private static void inverterString() {
        System.out.println("""
               ---------------------------
               Desafio Invers√£o de String
               ---------------------------""");
        System.out.print("Informe a string para inverter: ");
        InverterString.inverter(scanner.nextLine()); // Inverte e exibe a string fornecida pelo usu√°rio
    }

    // M√©todo principal que controla o fluxo do programa
    public static void main(String[] args) {
        while (true) {
            int opcao = lerOpcao(MENU_PRINCIPAL); // L√™ a op√ß√£o do menu principal
            switch (opcao) {
                case 1 -> somar(); // Executa o desafio de soma
                case 2 -> verificarNumeroFibonacci(); // Executa o desafio de Fibonacci
                case 3 -> mostrarResultadosFaturamento(); // Executa o desafio de faturamento
                case 4 -> mostrarPercentualFaturamento(); // Executa o desafio de percentual de faturamento
                case 5 -> inverterString(); // Executa o desafio de invers√£o de string
                case 6 -> { // Sai do programa
                    System.out.println("""
                   #QueroSerTargetiano üë®‚Äçüíª
                   Antes de ir... Acesse o meu portf√≥lio: https://meuportfolio-euvitortis-projects.vercel.app/
                   Saindo... Obrigado por usar o programa. üëã
                   """);
                    scanner.close(); // Fecha o scanner
                    return; // Termina a execu√ß√£o do programa
                }
                default -> System.out.println(OPCAO_INVALIDA); // Mensagem de erro para op√ß√£o inv√°lida
            }
        }
    }
}
